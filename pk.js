// test.js for Perlenspiel 3.1

// The following comment lines are for JSLint. Don't remove them!

/*jslint nomen: true, white: true, vars: true */
/*global PS */

var G; // public namespace variable for game

( function ()
{
	"use strict";

	// Map data and functions

	var _map = {
		plane: 0, // z-plane
		w : 0, h : 0, // width and height of map
		x : 0, y : 0, // x/y position of TLC of grid on map
		xmax : 0, ymax : 0, // maximum TLC
		wsize : 0, // size of each horizontal data line
		image : null, // drawing image
		walk : null, // walkmap image
		path : null, // path id for pathfinder
		timerID : null, // timer id

		// Scrolling variables
	
		xTarget : 0, // x scrolling target
		yTarget : 0, // y scrolling target
		scrolling : false, // enables scrolling

		// list of objects on map

		objects : [],

		// Establishes a new map with initial TLC on grid
		// [x|y] are where the TLC of the grid should appear on the map

		setMap : function ( imageMap, walkMap, x, y )
		{
			_map.objects.length = 0;
			
			_map.image = imageMap;
			_map.walk = walkMap;
			_map.w = imageMap.width;
			_map.h = imageMap.height;
			
			_map.wsize = _map.w * imageMap.pixelSize;
			
			_map.xmax = _map.w - G.gridX;
			if ( _map.xmax < 0 )
			{
				_map.xmax = 0;
			}

			_map.ymax = _map.h - G.gridY;
			if ( _map.ymax < 0 )
			{
				_map.ymax = 0;
			}

			_map.path = PS.pathMap( walkMap );	

			_map.scroll ( x, y );
		},

		// Draw the map

		draw : function ()
		{
			var result, len, i, obj, exec;

			PS.gridPlane( _map.plane );
			result = PS.imageBlit( _map.image, -_map.x, -_map.y );
			if ( !result )
			{
				PS.debug( "Nothing drawn!\n" );
			}

			// Call draw function for all map objects

			len = _map.objects.length;
			for ( i = 0; i < len; i += 1 )
			{
				obj = _map.objects[ i ];
				exec = obj.draw;
				if ( exec && ( typeof exec === "function" ) )
				{
					exec();
				}
			}
		},

		// Set TLC of map

		scroll : function ( x, y )
		{
			if ( x < 0 )
			{
				x = 0;
			}
			if ( x > _map.xmax )
			{
				x = _map.xmax;
			}
			_map.x = x;

			if ( y < 0 )
			{
				y = 0;
			}
			if ( y > _map.xmax )
			{
				y = _map.ymax;
			}
			_map.y = y;
		},

		// Add an object to map
		// Should be an object with following properties:
		// .draw = drawing function

		add : function ( obj )
		{
			_map.objects.push( obj );
		},

		// Returns true if (x|y) if walkable, else false
		// Assumes walkmap is one value per pixel

		walkable : function ( x, y )
		{
			var wmap, ptr, val;
			
			wmap = _map.walk;
			ptr = ( y * wmap.width ) + x;
			val = wmap.data[ ptr ];
			return ( val === 1 );
		},

		// Check if scrolling required for object at map coordinates [x, y]
		// Return true if scroll initiated, else false

		scrollCheck : function ( x, y )
		{
			var any, nx, ny;

			any = false;

			// calc effective grid coordinates

			x -= _map.x;
			y -= _map.y;

			if ( x < G.marginLeft ) // scroll left?
			{
				if ( _map.x > G.SCROLL_MARGIN )
				{
					nx = _map.x - G.halfX;
					if ( nx < G.SCROLL_MARGIN )
					{
						nx = 0;
					}
					_map.xTarget = nx;
					_map.scrolling = any = true;
//					PS.debug ("Starting scroll left\n");
				}
			}
			else if ( x > G.marginRight ) // scroll right?
			{
				if ( _map.x < _map.xmax )
				{
					nx = _map.x + G.halfX;
					if ( nx > _map.xmax )
					{
						nx = _map.xmax;
					}
					_map.xTarget = nx;
					_map.scrolling = any = true;
//					PS.debug ("Starting scroll right\n");
				}
			}

			if ( y < G.marginTop ) // scroll up?
			{
				if ( _map.y > G.SCROLL_MARGIN )
				{
					ny = _map.y - G.halfY;
					if ( ny < G.SCROLL_MARGIN )
					{
						ny = 0;
					}
					_map.yTarget = ny;
					_map.scrolling = any = true;
//					PS.debug ("Starting scroll up\n");
				}
			}
			else if ( y > G.marginBottom ) // scroll down?
			{
				if ( _map.y < _map.ymax )
				{
					ny = _map.y + G.halfY;
					if ( ny > _map.ymax )
					{
						ny = _map.ymax;
					}
					_map.yTarget = ny;
					_map.scrolling = any = true;
//					PS.debug ("Starting scroll down\n");
				}
			}
			
			return any;	
		},

		// Called at 15 fps

		timer : function ()
		{
			var dx, dy;

			// Handle scrolling

			if ( _map.scrolling )
			{
				if ( _map.x > _map.xTarget )
				{
					dx = -1;
				}
				else if ( _map.x < _map.xTarget )
				{
					dx = 1;
				}
				else
				{
					dx = 0;
				}
				
				if ( _map.y > _map.yTarget )
				{
					dy = -1;
				}
				else if ( _map.y < _map.yTarget )
				{
					dy = 1;
				}
				else
				{
					dy = 0;
				}
				
				if ( dx || dy )
				{
					_map.scroll( _map.x + dx, _map.y + dy );
					_map.draw();
				}
				else
				{
					_map.scrolling = false;
				}
			}
		}
	};

	// Player character data and functions

	var _pc = {
		mx : -1, my : -1, // x/y position on map
		gx : -1, gy : -1, // x/y position on grid
		plane : 0, // pc plane
		sprite : null, // pc sprite
		path : null, // current pc path
		step : 0, // current step on path
		timerID : "", // timer id

		// Move pc to a map location

		move : function ( x, y )
		{
			_pc.mx = x;
			_pc.my = y;
		},

		// Draw the pc

		draw : function ()
		{
			// Calc visible grid position

			_pc.gx = _pc.mx - _map.x;
			_pc.gy = _pc.my - _map.y;

			PS.gridPlane( _pc.plane );
			PS.spriteMove( _pc.sprite, _pc.gx, _pc.gy );
		},

		// Establish a path for pc
		// Path is an array of [ x, y ] arrays
		// Inserts scroll data into each step as needed

		setPath : function ( path )
		{
			_pc.path = path; // save new path (null if none)
			_pc.step = 0; // point to first step
		},

		// Called at 15 fps

		timer : function ()
		{
			var path, len, step, pos, x, y;

			path = _pc.path;
			if ( path )
			{
				len = path.length;
				step = _pc.step;

				if ( step < len )
				{
					pos = path[ step ];
					x = pos[ 0 ];
					y = pos[ 1 ];
					_pc.move( x, y );

					// Redraw if scrolling not needed

					if ( !_map.scrollCheck( x, y ) )
					{
						_pc.draw();
					}
					else
					{
						_map.timer();
					}

					// point to next path step
					
					_pc.step += 1;
					if ( _pc.step >= len ) // path done?
					{
						_pc.setPath( null ); // nuke it
					}
				}
			}
		}
	};

	// Process map image, return walkmap

	function _makeWalkMap ( image )
	{
		var w, h, len, ndata, i, val;

		w = image.width;
		h = image.height;
		len = w * h;

		ndata = [];
		ndata.length = len;

		for ( i = 0; i < len; i += 1 )
		{
			val = image.data[ i ];
			if ( val )
			{
				val = 1;
			}
			else
			{
				val = 0;
			}
			ndata[ i ] = val;
		}

		return { width : w, height : h, pixelSize : 1, data : ndata };
	}

	// Public game API is defined as properties of G global variable

	G = {
		gridX : 24, // width of grid
		gridY : 24, // height of grid
		halfX : 0, // half-width
		halfY : 0, // half-height

		SCROLL_MARGIN : 4,
		
		marginLeft : 0,
		marginRight : 0,
		marginTop : 0,
		marginBottom : 0,

		// Initialize game

		init : function ()
		{
			G.halfX = Math.floor( G.gridX / 2 );
			G.halfY = Math.floor( G.gridY / 2 );

			// Establish margins

			G.marginLeft = G.SCROLL_MARGIN;
			G.marginTop = G.SCROLL_MARGIN;
			G.marginRight = G.gridX - G.SCROLL_MARGIN;
			G.marginBottom = G.gridY - G.SCROLL_MARGIN;

			// Establish initial map

			_map.setMap( G.colormap, G.walkmap, 0, 0 );

			// start map timer @ 15fps

			_map.timerID = PS.timerStart( 4, _map.timer );

			// Create pc, place on map

			_pc.sprite = PS.spriteSolid( 1, 1 );
			PS.spriteSolidColor( _pc.sprite, PS.COLOR_BLUE );
			_pc.plane = 3;
			_pc.move( 7, 7 );

			_map.add( { draw : _pc.draw } ); // add to map's object list

			// Start pc timer @ 15 fps

			_pc.setPath( null );
			_pc.timerID = PS.timerStart( 4, _pc.timer );

			_map.draw();
		},

		click : function ( x, y, data, options )
		{
			var mx, my, path;

			// If clicking current pc loc, exit (for now)

			if ( ( x === _pc.gx ) && ( y === _pc.gy ) )
			{
				return;
			}

			// Convert clicked grid location to map coordinates

			mx = x + _map.x;
			my = y + _map.y;

			// Is location walkable?
			// If so, call pathfinder

			if ( _map.walkable( mx, my ) )
			{
				path = PS.pathFind( _map.path, _pc.mx, _pc.my, mx, my );
			}

			// If not walkable, draw a line to dest
			// Go to last walkable position on path

			else
			{
				path = PS.pathNear ( _map.path, _pc.mx, _pc.my, mx, my );
				path = PS.pathFind ( _map.path, _pc.mx, _pc.my, path[0], path[1] );
			}

			_pc.setPath( path ); // start pc moving

		},

		// Move pc to grid location x/y

		oline : null,
		oline2 : null,

		target : function ( x, y )
		{
			var mx, my, line, len, i, pos, nx, ny;
			
			PS.gridPlane( 2 );
			
			if ( G.oline )
			{
				len = G.oline.length;
				for ( i = 0; i < len; i += 1 )
				{
					pos = G.oline[ i ];
					nx = pos[ 0 ] - _map.x;
					ny = pos[ 1 ] - _map.y;
					if ( ( nx >= 0 ) && ( nx < G.gridX ) && ( ny >= 0 ) && ( ny < G.gridY ) )
					{
						PS.alpha( nx, ny, 0 );
					}
				}
			}
			G.oline = null;

			if ( G.oline2 )
			{
				len = G.oline2.length;
				for ( i = 0; i < len; i += 1 )
				{
					pos = G.oline2[ i ];
					nx = pos[ 0 ] - _map.x;
					ny = pos[ 1 ] - _map.y;
					if ( ( nx >= 0 ) && ( nx < G.gridX ) && ( ny >= 0 ) && ( ny < G.gridY ) )
					{
						PS.color(nx, ny, PS.COLOR_WHITE);
						PS.alpha( nx, ny, 0 );
					}
				}
			}
			G.oline2 = null;

			// Convert grid coordinates to map coordinates

			mx = x + _map.x;
			my = y + _map.y;

			PS.debugClear();

			line = PS.pathFind( _map.path, _pc.mx, _pc.my, mx, my, { direct : true, smoothing : false } );

			if ( line !== PS.ERROR )
			{
//				PS.debugClear();
				len = line.length;
				if ( len > 0 )
				{
					for ( i = 0; i < len; i += 1 )
					{
						pos = line[ i ];
						nx = pos[ 0 ] - _map.x;
						ny = pos[ 1 ] - _map.y;
//						PS.debug( nx + ", " + ny + "\n" );
						if ( ( nx >= 0 ) && ( nx < G.gridX ) && ( ny >= 0 ) && ( ny < G.gridY ) )
						{
							PS.alpha( nx, ny, 255 );
						}
					}
					G.oline = line;
				}
				else
				{
					PS.debug("No line!\n");
				}
			}
			
//			line = PS.pathFind( _map.path, _pc.mx, _pc.my, mx, my, { direct : true, smoothing : true } );
			line = PS.ERROR;
			if ( line !== PS.ERROR )
			{
//				PS.debugClear();
				len = line.length;
				if ( len > 0 )
				{
					for ( i = 0; i < len; i += 1 )
					{
						pos = line[ i ];
						nx = pos[ 0 ] - _map.x;
						ny = pos[ 1 ] - _map.y;
//						PS.debug( nx + ", " + ny + "\n" );
						if ( ( nx >= 0 ) && ( nx < G.gridX ) && ( ny >= 0 ) && ( ny < G.gridY ) )
						{
							PS.color(nx, ny, PS.COLOR_GREEN);
							PS.alpha( nx, ny, 255 );
						}
					}
					G.oline2 = line;
				}
				else
				{
					PS.debug("No line 2!\n");
				}
			}
		},
		
		loader : function ( image )
		{
			var wmap;

//			_map.image = image;
//			PS.imageBlit( image );
//			PS.imageDump( image, PS.DEFAULT, 1, 16 );
			wmap = _makeWalkMap( image );
			PS.imageDump( wmap, PS.DEFAULT, 1, PS.DEFAULT, false );
		}
	};
	
} () );

PS.init = function( gestalt, options )
{
	"use strict";

	PS.gridSize( G.gridX, G.gridY );
	PS.statusText( "Test" );
//	PS.imageLoad( "palace.bmp", G.loader, 1 );
	G.init();
};

PS.touch = function( x, y, data, options ) {
	"use strict";
	
	G.click( x, y, data, options );
};

PS.release = function(x, y, data, options) {
	"use strict";
};

PS.enter = function( x, y, data, options ) {
	"use strict";
};

PS.exit = function( x, y, data, options ) {
	"use strict";
};

PS.exitGrid = function( options ) {
	"use strict";
};

PS.keyDown = function( key, shift, ctrl, options ) {
	"use strict";
};

PS.keyUp = function( key, shift, ctrl, options ) {
	"use strict";
};

PS.input = function( sensors, options ) {
	"use strict";
};

// Color map

G.colormap = {
	width : 48, height : 48, pixelSize : 1,
	data : [
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xB4BDC1, 0xC3C2B2, 0xB3C4C3, 0xB6BDC5, 0xC9B6C4, 0xC7B8B5, 0xCBB5B4, 0xC7C8C3, 0xB5C6B4, 0xB5C1B6,
		0xBABCB4, 0xC4BFBE, 0xC3CAB5, 0xC6B6B9, 0xB6C7C0, 0xBBC1B6, 0x000000, 0x000000, 0xB5C8C5, 0xC1C1B2, 0xB2C4B2, 0xC8B7C4, 0xBFC9B5, 0xBBC8C3, 0xB6CBB4, 0xC8C0C6,
		0xC1B5C3, 0xCAC0B5, 0xBCC7BA, 0xB3C0C0, 0xC0BBB4, 0xBDB8C8, 0xC6B8BB, 0xC2B7B7, 0xC0BFB3, 0xC2BAB3, 0xBBB9BD, 0xC6CBC2, 0xC0B9BF, 0xCBC6B8, 0xB4BFCC, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xB4B3C6, 0xC3BFCC, 0xBBB8C1, 0xB3C1BA, 0xC6C0BC, 0xC5C4C2, 0xCCC0CA, 0xC6B7B8, 0xC5BEB5, 0xBCCAB3, 0xB8C6B5,
		0xC1C6C3, 0xC1C0B4, 0xB5C8C2, 0xBABBBE, 0xC2C2C7, 0xC7C8C1, 0x000000, 0x000000, 0xC5BBC0, 0xBFBEBE, 0xBBC2C8, 0xC5C5C5, 0xB9B4C6, 0xCCCAB5, 0xC6B6BE, 0xB6C3BC,
		0xB3BBB8, 0xB8BABB, 0xBFB3BB, 0xBDBFCB, 0xC0C9C4, 0xC4CBB8, 0xB5B4C7, 0xC0B4B2, 0xC3B3B3, 0xC2C6BA, 0xCABFC0, 0xC4C4C0, 0xC5C5C8, 0xC2BFBE, 0xB8C9CB, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0xBEC0BF, 0xC7C7B4, 0xB5C0C1, 0xB2BBC4, 0xC7B8C4, 0xC2B8C3, 0xBDB7BD, 0xBDBFBE, 0xB5BAC3, 0xBEB9B2, 0xB6CBB6, 0x000000,
		0x000000, 0xC8BFCC, 0xC5BDC0, 0xBAC9C4, 0xC3C5B6, 0xB8B7C2, 0xC5CCC3, 0xB8C7C0, 0xC0C0C9, 0xCCB3B3, 0xC5CAC5, 0xBFBCCB, 0xCAC2C1, 0x000000, 0x000000, 0xCCC8B9,
		0xB4C5BE, 0xC6B6CA, 0xBFB4B8, 0xC1BFB6, 0xB5B3BF, 0xC7B5BE, 0xC4C9C0, 0xB7C5B2, 0xC0B5BC, 0x000000, 0xBFC0B8, 0xC3C4CB, 0xBEC6C1, 0xCACBC8, 0xCCC4C1, 0x000000,
		0x000000, 0x000000, 0x000000, 0xBCC1C8, 0xB3C6C3, 0xC4B5B4, 0xBFBBB3, 0xB5C8C5, 0xC0C5BB, 0xB6CBC3, 0xC2B8B5, 0xBCB9BC, 0xB7C7C1, 0xB3C5B6, 0xC6B9BE, 0x000000,
		0x000000, 0xBCC7BB, 0xB4CCCB, 0xC9C8C2, 0xB4BECB, 0xC5B6C8, 0xC0C2C6, 0xCCB6BB, 0xB5BDC9, 0xC7C2B8, 0xBDC6B9, 0xBEC1C6, 0xB9BDC5, 0x000000, 0x000000, 0xB9B8B4,
		0xC6C6C0, 0xBAC5C8, 0xB6CAC0, 0xB6C7BD, 0xCABDBB, 0xB6B7B3, 0xC9B8C8, 0xCBBCB8, 0xC1C4C3, 0x000000, 0xC1B6B2, 0xB7CBB7, 0xC4C7B5, 0xC8B9B7, 0xB9B9CB, 0x000000,
		0x000000, 0x000000, 0xC8C7B9, 0xB2BDC4, 0xCCB7C0, 0xC8B8CB, 0xBCBCC5, 0xC0C4C4, 0xC1C5BE, 0xC8B6B5, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0xB8C1B7, 0xCBC3C1, 0xBEC9B9, 0xCAC7BD, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xBFC4CC, 0xC8CBC2, 0xC3C6C8, 0x000000,
		0x000000, 0xC8C9B4, 0xC9BEC4, 0xC8CABB, 0xC2B3C3, 0xC0B5B5, 0xB8B4C2, 0xC3B4C9, 0xC8CABB, 0xB7C0BC, 0xC2C9BC, 0xCBC9C9, 0xB8B9B9, 0xC4B8C4, 0xC2B6BE, 0xC9C5C4,
		0xB3B6CA, 0xB3BFC7, 0xCACBB6, 0xC7BCC6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC4B8C6, 0xC7BBC0, 0xBBBDBD, 0xB8B5C1, 0xC1C0BA, 0xC2B6BB,
		0xC5B7B7, 0xCABCCA, 0x000000, 0xC0C2BB, 0xBFCBCC, 0xB8B8BF, 0xB9B5BC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC4BBC6, 0xBBC4BB, 0xCAB8B6, 0x000000,
		0x000000, 0xC6C4C4, 0xBBB5CB, 0xC9B9CA, 0xC2BECB, 0xB4CABE, 0xBEB8C3, 0xC5B6B9, 0xBDBFB4, 0xC2BEC1, 0xB6C0B8, 0xC6B2C7, 0xB8BCBC, 0xB3B4BD, 0xC4B8B7, 0xC2CBB3,
		0xCCC1B2, 0xC9C8BD, 0xC0C1C7, 0xC7CCCC, 0xBCC1B3, 0x000000, 0x000000, 0x000000, 0x000000, 0xB4C4CC, 0xBDB7B4, 0xCBBDCC, 0xB4B7C5, 0xB8CABC, 0x000000, 0x000000,
		0x000000, 0xBBC1B3, 0x000000, 0xB4BCBC, 0xC2C4B4, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xB6C4B3, 0x000000,
		0x000000, 0xC9C4B5, 0xCCBBBD, 0xCCCAB6, 0xC1C1BE, 0xCBB4C2, 0xB6CCBF, 0xBEB6CA, 0xCCB9CA, 0xCACCBA, 0xCBB8C0, 0xC5B5B4, 0xBEBABE, 0xB8C5C4, 0xC7B5C4, 0xBCB8C3,
		0xBBCCBA, 0xB7B5C8, 0xC9CAB2, 0xC6C2CC, 0xBEBBC8, 0xC4C8BC, 0x000000, 0x000000, 0xC1B3C8, 0xC7B3C9, 0xC4B9C6, 0xBDC9B4, 0xB8B3C1, 0xC5CCC6, 0x000000, 0xC2C8BD,
		0x000000, 0xBCBFC0, 0x000000, 0xBACCB3, 0xB6CBBD, 0xC9C4CC, 0xC1C5B8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xB6BDCA, 0xBBCBC3, 0xB5B5B7, 0x000000,
		0x000000, 0xB8B8BC, 0xCCCCC1, 0xB5C7B3, 0xCAB9C2, 0xC2C0C4, 0xBBC6C6, 0xC8BEB7, 0xBECBB2, 0xC2B6BE, 0x000000, 0xB3BAC9, 0x000000, 0x000000, 0xB3BAB2, 0x000000,
		0xC4BBB4, 0xC8B6CB, 0xB6BEB3, 0xBFC5CC, 0xBACCC8, 0xCCB4C9, 0x000000, 0x000000, 0xC5B3B7, 0xB6BCC7, 0xC6B5CA, 0xB5BBCB, 0xB9CAB8, 0xC4C5B8, 0x000000, 0xCBC3C6,
		0x000000, 0xB5BBCB, 0x000000, 0xC0B5C5, 0xB5C0B4, 0xBEC1BD, 0xB4CBB5, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCABCBB, 0xB2B5C2, 0xC5C0C9, 0x000000,
		0x000000, 0xC5BDB5, 0xBFC8B5, 0xC0BABC, 0xCBB4C8, 0xCBB3C0, 0xCCB4BE, 0xB6B3C7, 0xC9CCB5, 0xC5C4B2, 0x000000, 0xC9BDC2, 0x000000, 0x000000, 0xBFC6B5, 0x000000,
		0xC0BDB6, 0xC6C7B8, 0xB7B5B6, 0xB7B6C8, 0xB6B8C5, 0xBBCBBA, 0x000000, 0x000000, 0xC7BFC5, 0xC7B7B8, 0xB5CAC0, 0xB5BBCC, 0xCCB8C5, 0xB9C6BF, 0x000000, 0xC6BCB3,
		0x000000, 0xB9C9CC, 0x000000, 0xCAB9C6, 0xCBC2BF, 0xC1BBC1, 0xC4B9B5, 0xC5C7C7, 0xC9B9C4, 0x000000, 0xCCC0C0, 0xC1B6CA, 0xCBC7BF, 0xB6C1C3, 0xBEB9BE, 0x000000,
		0x000000, 0xC1CCB9, 0xB3BCC6, 0xCBC8BE, 0xC4BEBD, 0xB4C6BE, 0xB9C8BD, 0xBFB5B4, 0xBBB7C1, 0xBDC1C7, 0x000000, 0xC7B7B7, 0x000000, 0x000000, 0xC0CBBF, 0x000000,
		0xC7BDC6, 0xC2B4BB, 0xC0B2C1, 0xC4BCBB, 0xC6C0BE, 0xC0BBB4, 0x000000, 0x000000, 0xB7C0BE, 0xB3B4BA, 0xBBCAC1, 0xC8C5B8, 0xCAB6C1, 0xB6C9C8, 0x000000, 0xBDBDB4,
		0x000000, 0xC0B2CA, 0x000000, 0xCCC2C1, 0xB9B4B2, 0xBAB8C3, 0xC8CCC5, 0xBFC7C4, 0xBBB9B5, 0x000000, 0xC4C6C3, 0xC5BEB4, 0xC2CBB6, 0xB4B6B4, 0xB7C0BE, 0x000000,
		0x000000, 0xCCBDC4, 0xB8C7BB, 0xB3B5C1, 0xB4B6B7, 0xB3B8B4, 0xB7CBCB, 0xB3BFBF, 0xCBB9B7, 0xC1BFC8, 0x000000, 0xBDCAB9, 0x000000, 0x000000, 0xB3C6BC, 0x000000,
		0xBDBCB6, 0xCBBEC3, 0xBAC9B6, 0xBCC9B4, 0xBCB9C0, 0xC7C2C3, 0xB7BBBC, 0xCAB9B8, 0xBAC7CB, 0xCCB9B2, 0xCABCB4, 0xB6C0C3, 0xCCB6BB, 0xC6C7B3, 0x000000, 0xCCB9C5,
		0x000000, 0xB7B4C6, 0x000000, 0xB7BABC, 0xC1CCB8, 0xB4C1C1, 0xBDC1C1, 0xBBC6B5, 0xB8B9BA, 0xBEC7C2, 0xC4B9C7, 0xB9C8B6, 0xB4C9C6, 0xB5BDC5, 0xBABFBF, 0x000000,
		0x000000, 0xC7B5B3, 0xC4B5B8, 0xC2C8B4, 0xB7C2C6, 0xC8BCC3, 0xBAC4BF, 0xC7C3B5, 0xB7B4B5, 0xB5B4C5, 0x000000, 0xB5C9B7, 0x000000, 0x000000, 0xC5BBB4, 0x000000,
		0xBBC6CB, 0xCBBEC2, 0xC5C7C5, 0xC2C9B7, 0xB7C0B4, 0xBAB6BE, 0xC5B6C6, 0xB6C5C0, 0xB2BFC1, 0xBFB4B4, 0xC4CCCC, 0xC6BAB9, 0xC2BEB5, 0xBCB8C3, 0x000000, 0xC3BDB7,
		0xC3B3B7, 0xC7B7C0, 0xC6B6C0, 0xC7BDC9, 0xCAC8BF, 0xC3BAC3, 0xC7B4C8, 0xBEB3C1, 0xC8B4BA, 0xC4B3C6, 0xB3CCCC, 0xC1C4CA, 0xC6C1B9, 0xB5BDB5, 0xBBC6C7, 0x000000,
		0x000000, 0xBFBDBE, 0xC9C8C0, 0xC3C5B2, 0xBAB6BC, 0xC3B4B4, 0xBFBFB8, 0xCAB3CB, 0xB3B5C1, 0xBAC9C8, 0x000000, 0xB3B5CC, 0x000000, 0x000000, 0xCCC4C1, 0x000000,
		0xBCCBC9, 0xBBC4C4, 0x000000, 0x000000, 0xB2BBB7, 0xCCC1CA, 0xCAB6B7, 0xB8BFBC, 0xB6C4C2, 0xC8B8C1, 0x000000, 0x000000, 0xB6C0C4, 0xC2B9BD, 0x000000, 0xC5B8C4,
		0xB3C7B7, 0xB6B2C0, 0xBFBCBC, 0xBFB5BC, 0xC2BDB8, 0xB3C0BD, 0xCAB4C4, 0xCACCBF, 0xB8BFCA, 0xB2CCB9, 0xC0C8C7, 0xC2C6B9, 0xC8C5C2, 0xBBC6B3, 0xCCBBBB, 0x000000,
		0x000000, 0xC8CBBD, 0xC8B6B4, 0xBBC6BB, 0xC5C2BC, 0xBFC6C5, 0xC2C6C2, 0xBAC0CA, 0xC2BDBD, 0xB5C1C6, 0x000000, 0xCABBB9, 0xBFB7C2, 0xB3CAB6, 0xC1C6BD, 0x000000,
		0xBECCC4, 0xC9BFBE, 0x000000, 0x000000, 0xC1C6C6, 0xC0C9CB, 0xC6BFB7, 0xB9B5BD, 0xC4C6B9, 0xC6BBC6, 0x000000, 0x000000, 0xBAC4B4, 0xBEB8C0, 0x000000, 0xC1BEBF,
		0xB3C4C4, 0xC2C7C8, 0xC4BFC5, 0xC6C9C7, 0xB7CAB3, 0xB2CBB7, 0xBEC8B2, 0xBDCBC4, 0xC9CCB2, 0xC4B5B9, 0xC2CAC8, 0xB2C4BD, 0xC2C1B9, 0xB4B4B7, 0xCBC1C5, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC3C1B6, 0xCCC3C5, 0xC4C4BF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xBBB2B6, 0xBDC8B3, 0xB5C8C3, 0xBEBCBE, 0xCBB8C5, 0xC9CCC0, 0xC1B4C2, 0xBAB5C3, 0xBCC1B7, 0xBDBEB4, 0xC9C1B5, 0xBBBCCA, 0xB3B9C3, 0xC6C4C1, 0x000000, 0xBDCBCB,
		0xB8C5CB, 0xB4C4BB, 0xC8BEBB, 0xC6B5CB, 0xBFC6C7, 0xB4BAC2, 0xC2B8BB, 0xCCBFB3, 0xC3C6C1, 0xC0C1BF, 0xC0BFBD, 0xBCB4BC, 0xB8CCC0, 0xB8C8C0, 0xB6C0BF, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xBDC7C2, 0xBFB7B6, 0xC3C7BD, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xB5B6B8, 0xB8B6C6, 0xC9B5C5, 0xCBB8CA, 0xBDBAC7, 0xB6BEBD, 0xB2C1B7, 0xB3B9B8, 0xCCC3BC, 0xBFB5C4, 0xCAB9C5, 0xCAC2B6, 0xC5B6CB, 0xC9C9C7, 0x000000, 0xB7C9B9,
		0xBCC1C5, 0xC4B5C1, 0xCAC5C7, 0xB6B8C1, 0xBCB9B7, 0x000000, 0x000000, 0x000000, 0xC6CAC0, 0xC4BDB2, 0xC1C1BA, 0xB5C9BE, 0xC6BFBD, 0xC9C9BB, 0xCAC1C1, 0x000000,
		0x000000, 0x000000, 0xC0C4C5, 0xB9B7BF, 0xB8BDC0, 0x000000, 0x000000, 0xB2B7CC, 0xBCBCB6, 0xB5C2C9, 0x000000, 0x000000, 0xB4BCC9, 0xCCC4C6, 0xBFBDB9, 0xCCC5BF,
		0xC8C4B7, 0xC6B7C0, 0xC5C0C6, 0xC6BCB7, 0xBBBCB7, 0xC2B8B6, 0xC6BDBB, 0xC9C4BC, 0xCABFB7, 0xBCCAC7, 0xBFB9C7, 0xC0C7B5, 0xC7B9B5, 0xB4C2CC, 0x000000, 0xC1BBC2,
		0xBECBC6, 0xBECAB7, 0xCCC6B9, 0x000000, 0x000000, 0xC3C6CB, 0xBABBC1, 0xC1B3C4, 0x000000, 0x000000, 0xCCB5CC, 0xC0C4CC, 0xBBC4C1, 0xBFBFCB, 0xC9BDB6, 0x000000,
		0x000000, 0x000000, 0xB3BDC7, 0xB9B9CC, 0xC5B7B9, 0x000000, 0x000000, 0xBCBFC3, 0xBBB9BF, 0xC5BEB3, 0x000000, 0x000000, 0xCCB4C7, 0xCAC2B9, 0xB8CBB8, 0xB6BCBC,
		0xC8BFB2, 0xC6BEC3, 0xB7BBCB, 0xB6B5BD, 0xC2B5B9, 0xB6C8C8, 0x000000, 0x000000, 0xB6C4BC, 0xBFC3C3, 0xBFB4B2, 0xC2B4B6, 0xB3B8BE, 0xCAC9BB, 0x000000, 0xB8C0CB,
		0xB2BBCC, 0xC0C0CC, 0x000000, 0xC8BEC1, 0xBBC7C3, 0xCCC9C6, 0xC7C0C3, 0xC5B6C8, 0xB5B6BF, 0xBFC5C1, 0x000000, 0xC2B4C6, 0xC0CCBE, 0xC7BABD, 0xB8BEBE, 0x000000,
		0x000000, 0x000000, 0xB2BAB6, 0xBDC9BC, 0xBDBEB3, 0x000000, 0x000000, 0xC2C1B6, 0xB3BEB3, 0xB7C5C4, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xC0CBBA, 0xB6B5BF, 0xBDB8B3, 0xC0BBBD, 0xC4B6B8, 0xCAB6B5, 0x000000, 0x000000, 0xB5B6B3, 0xBCCBB5, 0xB3B9C5, 0xC4C3C5, 0xBFC9B2, 0xB5B5C5, 0x000000, 0xB6C1CC,
		0xC2CACC, 0x000000, 0xB7C0CC, 0xB3BEB4, 0xC6B6CA, 0xC4B3CC, 0xBBC1CC, 0xBCBEB5, 0xB4B6CA, 0xC9C5BB, 0xB4C8CA, 0x000000, 0xC0BEC5, 0xCCC6CA, 0xB5C4CA, 0x000000,
		0x000000, 0x000000, 0xB9BFCB, 0xC6C4B7, 0xBFC8C1, 0x000000, 0x000000, 0xC5B3C7, 0xB7B7BD, 0xCCB2B3, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xC5B7B7, 0xBDC5CA, 0xC8C8C1, 0xC5BFB9, 0xB6B9C0, 0xB4BEB7, 0xBFB5BA, 0xB3B3B6, 0xB5B4C6, 0xC9C2B8, 0xC5CBC5, 0xB5BCBF, 0xC1BFC0, 0xC0BECB, 0x000000, 0xC6B5CC,
		0xCBB5B6, 0x000000, 0xC0C2C5, 0xB5BCC9, 0xBBC4C9, 0xC1C3C6, 0xB6B4B9, 0xBFB4BF, 0xC4B8B7, 0xB8C9C0, 0xC1B5C6, 0x000000, 0xC0BBB7, 0xB9C0B6, 0xB8C6BB, 0x000000,
		0x000000, 0x000000, 0xB5B5B3, 0xC0C0BC, 0xBBB7B5, 0xB6C9BB, 0xC2C9CA, 0xC6BBC5, 0xBFBCBD, 0xBBB3C3, 0xC7C2C2, 0xC0B8BB, 0xCBB7CA, 0xCCB5B5, 0xC5BDC0, 0x000000,
		0xC5C5CB, 0xB6CCBE, 0xC2C4C3, 0xC3BAB9, 0xC8CCBD, 0xC0BDBF, 0xC1CBBC, 0xBBCCB5, 0xCBC1C0, 0xCAB7C4, 0xBCB3B8, 0xC5CAC1, 0xCAC9C9, 0xB7C6C5, 0x000000, 0xBCBAC5,
		0x000000, 0xBAB4CB, 0xC5CBCB, 0xB4BFC3, 0xB2BFBE, 0xB9B6BC, 0xC4B6BE, 0xCCC7C0, 0xC5BFBF, 0xC5C6CA, 0xBEC4BF, 0xC7C6C4, 0x000000, 0xB9CABF, 0xC3BCB7, 0x000000,
		0x000000, 0x000000, 0xCBC3C3, 0xCBB4CA, 0xCCC2CB, 0xCCBEBA, 0xB5C7C3, 0xC1C1C4, 0xC3C0B5, 0xC6B6CC, 0xC3C0B7, 0xC8BEBC, 0xBFC8BF, 0xC1C5C4, 0xB9C6CC, 0x000000,
		0xBEBEBC, 0xBDBCC3, 0xBEB8B8, 0xBDBBB6, 0xB4BBBA, 0xC1CBC6, 0xC7C4B3, 0xB5B8CA, 0xB7C7CC, 0xC0B2B7, 0xCAB3B8, 0xBFBABC, 0xB3C0C2, 0xC6C0B8, 0x000000, 0xC1BEC7,
		0xBBCBBA, 0xBEC7B3, 0xB4C7B6, 0xC7BDB9, 0xBDB9B6, 0xBEB4BC, 0xBAB8C8, 0xC1C4BC, 0xB8C0C8, 0xC1C1B4, 0xC8BDBD, 0xBFBACA, 0xB4BDCA, 0xBDB4C2, 0xCAB2C2, 0x000000,
		0x000000, 0x000000, 0xB5B6B5, 0xB9C2BC, 0xB5B6B3, 0xBFBDC4, 0xC8C2BF, 0xC5C6B5, 0xC1C1C0, 0xBBBDB6, 0xCBC7C2, 0xC5B6BC, 0xC2B8B7, 0xB7C6B3, 0xBAC5C6, 0x000000,
		0xB6C7BB, 0xB2BDBC, 0x000000, 0x000000, 0xC6BCB4, 0xC2C4C5, 0xBCC5C0, 0xC5B6CC, 0xC3CBB5, 0xC3C7C7, 0x000000, 0x000000, 0xC7C5B9, 0xCAC1C7, 0x000000, 0xC7C1B9,
		0x000000, 0xC8C6BA, 0xC4B6B6, 0xB3B2B6, 0xC1C0CA, 0xC6B2B6, 0xB5BAC9, 0xBBBECB, 0xC8BDC1, 0xC5BBCA, 0xCBC1C1, 0xB8B7B7, 0x000000, 0xC7C1C8, 0xC5B7B9, 0x000000,
		0x000000, 0x000000, 0xC6C1C3, 0xC4C7B8, 0xCBB5C5, 0xC6B6B8, 0xC4B3C0, 0xC3CCCC, 0xB9C1C5, 0xBBC3BF, 0xBDBECA, 0xBBB5B3, 0xCBB5C1, 0xB2BCCC, 0xC7C8B4, 0x000000,
		0xB9BEBF, 0xCCC7C1, 0x000000, 0x000000, 0xB7C7C4, 0xBDC2B7, 0xB5BDC0, 0xB7BDCA, 0xBCB5BF, 0xB2BEC3, 0x000000, 0x000000, 0xB7B6CC, 0xC8C8BC, 0x000000, 0xBABAB7,
		0xBBC3CB, 0x000000, 0xBAC5B7, 0xCCB8BF, 0xB3C0C5, 0xBFCCBC, 0xB4C5CC, 0xC1BFC9, 0xC4CAC4, 0xC4B3CB, 0xC3C1BD, 0x000000, 0xBEB4C7, 0xC3C6CA, 0xB2BFC8, 0x000000,
		0x000000, 0x000000, 0xCCC7BB, 0xC3B4CB, 0xC5BDC5, 0xC8B4CB, 0xC3C8BA, 0xB4B3B8, 0xB3BFC3, 0xC5B9C3, 0xBBCCB3, 0xC3B3B5, 0xB5CBBA, 0xBCB7BE, 0xC1BAC2, 0x000000,
		0xBEB6B4, 0xC6BDCC, 0xC5B7B8, 0xBBCBBF, 0xCBB8B6, 0xC2B6BC, 0xCBBAC1, 0xC8B4BF, 0xC6C8C3, 0xBBB7C3, 0xC9B4B4, 0xB8C4C2, 0xB9BBCB, 0xC6C3C8, 0x000000, 0xB7C2BE,
		0xC6C9C9, 0x000000, 0xC0BCCB, 0xC8BCC6, 0xC0C9B7, 0xBDB9C9, 0xBBC4B8, 0xB3BECC, 0xC8C4BF, 0xB8CABA, 0xC3C7C3, 0x000000, 0xB2C6B7, 0xB7BDC3, 0xB5CBC4, 0x000000,
		0x000000, 0x000000, 0xB6BFB5, 0xC6C9C8, 0xB8CABB, 0xB3CBC3, 0xC4C8C6, 0xC2CBC9, 0xCCCCC5, 0xC9B5C4, 0xC0CAC9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xB8BFC6, 0xB4C3CA, 0xBDBDBF, 0xCBCCCB, 0xB4BCB2, 0xB8C8BE, 0xB3BEB9, 0xB6C6C8, 0xC4C8C6, 0xBBB5CB, 0xC9B7B8, 0xB4C1B6, 0xC2B6C4, 0xBDB7C3, 0x000000, 0xBFBCC4,
		0xC4CBC3, 0xB9B9C2, 0x000000, 0xB3B4BD, 0xB4B2C9, 0xB7BCC8, 0xB6C0BF, 0xC5BBBF, 0xBFCCBE, 0xBDBBCC, 0x000000, 0xC0B4CC, 0xC0CABB, 0xC5C5BB, 0xB7B6C3, 0x000000,
		0x000000, 0x000000, 0xCBCCB3, 0xBCC7CA, 0xB2C1C7, 0xC6B4C2, 0xC3B9C6, 0xCAC9BE, 0xBDC2BF, 0xB6BBB9, 0xC7B4CA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xB3B9C2, 0xBCBDC5, 0xBFC4CA, 0xCABBCA, 0xBEBDC0, 0xB5BEBF, 0x000000, 0x000000, 0xCBC2C1, 0xC3C8BC, 0xBFB3B3, 0xBCBEC9, 0xC2C8BD, 0xC1B7C4, 0x000000, 0xCBB2CA,
		0xC4C9C1, 0xB4BEB4, 0xB9CACC, 0x000000, 0x000000, 0xBDB4CC, 0xC5B4B8, 0xC7CAB5, 0x000000, 0x000000, 0xC0C9B5, 0xC9B9B8, 0xC7B8CC, 0xC2B6B5, 0xC0C5CA, 0x000000,
		0x000000, 0x000000, 0xBDB4B4, 0xB8BDC1, 0xB5CAC6, 0xC9CAC6, 0xCBC2BD, 0xB3C2C4, 0xB5B4C0, 0xC5C5BC, 0xC5BBB3, 0xB2CCBD, 0xC5C7CC, 0xC2C4B8, 0xCCC2B5, 0x000000,
		0xB5C8B3, 0xCCBAC4, 0xB4C7C4, 0xCAB7CA, 0xCCB5C3, 0xCCB9B7, 0x000000, 0x000000, 0xBBC8BE, 0xCAC5B8, 0xC0C1CB, 0xC5BBBE, 0xCACBCA, 0xCAC5BB, 0x000000, 0xB6B7C1,
		0xC9BAB7, 0xB7C5B9, 0xC1B6BF, 0xB3B2C8, 0xBFBFC3, 0x000000, 0xC1C6C0, 0x000000, 0xC4BCBC, 0xC0C5B4, 0xB7C3C3, 0xBEC3B3, 0xCAC7B6, 0xC6C6C9, 0xC6C7C7, 0x000000,
		0x000000, 0x000000, 0xB5C2C4, 0xBFCACA, 0xB7C2B6, 0xC8C3BC, 0xC0B9B7, 0xC0B4C0, 0xC0C6B4, 0xB2C8C6, 0xC2B7C4, 0xCBC6C1, 0xC0BEB5, 0xB6C4C6, 0xC1B2C9, 0x000000,
		0xB7BFBA, 0xBBBBBD, 0xC8B5B6, 0xC0B7B9, 0xC6B9C1, 0xC3C7C8, 0xBEC5BA, 0xB8CCC6, 0xB5BDC4, 0xB2C4C4, 0xBEC3C5, 0xCBB2C3, 0xC3CCCA, 0xCAC3BA, 0x000000, 0xBECBB2,
		0xB5BABD, 0xC2C3BF, 0xC6C4B7, 0xBBB5B7, 0xC8CCC9, 0xC6B7C2, 0xBFBCC5, 0xBDBFBA, 0xB3C4BB, 0xB5CCBE, 0xB5C5BB, 0xBFBCCA, 0xBAC3B4, 0xB2B8C9, 0xB6B6C2, 0x000000,
		0x000000, 0x000000, 0xBECBC1, 0xC6C1C6, 0xB3CABF, 0xBDC1C3, 0xCBB7BD, 0xBDC4CC, 0xC0C8BC, 0xBDB9C8, 0xC7CCBE, 0xCCBBC6, 0xC4BDC8, 0xCBBDB5, 0xC9BDB7, 0x000000,
		0xC9C8B6, 0xBFBFB7, 0xC8BAB7, 0xBCB8BC, 0xCBB4CB, 0xBDB6B9, 0xBECABD, 0xC9B3B4, 0xBAB2B2, 0xBEBABC, 0xC1B4C0, 0xB8BCBB, 0xC5C6CC, 0xBFC5BB, 0x000000, 0x000000,
		0xC7BFCA, 0xB4B8C5, 0xBABFB6, 0xCACBC9, 0xB6CCB4, 0xC6C3BD, 0xC0C5C3, 0xC4C8B2, 0xB5C3C8, 0xB5B4C2, 0xCAB3B4, 0xCCC5B8, 0xB9BBCC, 0xC3C3C7, 0xC3B5B9, 0x000000,
		0x000000, 0x000000, 0xBFBFBD, 0xBDC3B6, 0xBCBCBE, 0xC0C8C2, 0xC0BBBF, 0xBFC2CA, 0xB6B3CA, 0xB8C4BA, 0xC0B5C0, 0xC9B8B4, 0xC3C9BE, 0xCCCBC4, 0xBEBDC4, 0x000000,
		0xBCB2BA, 0xB8B3C8, 0x000000, 0x000000, 0xBBCAC8, 0xBFCABC, 0xBAC5C0, 0xCBC9C1, 0xB7BFC8, 0xC1B7C9, 0x000000, 0x000000, 0xB2CAC1, 0xB4B6C6, 0x000000, 0x000000,
		0x000000, 0xC2B4C0, 0xC1C6BC, 0xC2C4B3, 0xB5C1BD, 0xC4B5CC, 0xBDC6B8, 0xCBC9B5, 0xCACABB, 0xBFBAB3, 0xB2BDC4, 0xB4B6C4, 0xC9B9CA, 0xB4C1C3, 0xB8C8B7, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC4B4C2, 0xB8BEBC, 0xC6C6B7, 0xC9C0B3, 0xB7C1C6, 0xC2B4C4, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xC7B7C5, 0xCCB7C0, 0x000000, 0x000000, 0xC1C9C7, 0xC2BFBD, 0xC7C3BE, 0xB4C8B9, 0xBCC1C7, 0xCABAB4, 0x000000, 0x000000, 0xBCCABA, 0xC3B9B6, 0x000000, 0x000000,
		0x000000, 0x000000, 0xB6C3CB, 0xBFB4C1, 0xC4C0CA, 0xC9B7C1, 0xC1B5B7, 0xB9BBC4, 0xC2C0C8, 0xB2C2B9, 0xB5B5CC, 0xC8B5BB, 0xBBBBBD, 0xB9B9BD, 0xB6C6BD, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC7B2BF, 0xBDC5C8, 0xBCBFB8, 0xCBBBB4, 0xB2B5BD, 0xBDB7CB, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0xCCC4BB, 0xC1C3C9, 0xCCB2B4, 0xC3CCC2, 0xC3C3BD, 0xC0CAC7, 0xC4CBBF, 0xC3BAC4, 0xB8C3B9, 0xC3C4BA, 0xB6B5B3, 0xC0CCB4, 0xBFB7B7, 0xC0BCB6, 0x000000, 0x000000,
		0x000000, 0xCBC5BD, 0xC5BCC0, 0xB7C3C0, 0xC6B8C5, 0xB4B6B7, 0xBEBAB6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0xBFBBC3, 0xC6BBC4, 0xB6BCB5, 0xC8C8B6, 0xCBC9C3, 0xC4CAC0, 0xB5BCC6, 0xB7BEC3, 0xB6C8BC, 0xB5C1BC, 0xBEBDC6, 0xCAC5C5, 0xBDB5CA, 0xB7B9B7, 0x000000,
		0xC4B7B8, 0xBBBAC4, 0xC3B6BC, 0xB3C2C4, 0xC8CAC7, 0xC5C9B8, 0xBFC6B9, 0xC9C9BE, 0xBACBCC, 0xC5B5B8, 0xBCB9B3, 0xB8C0B4, 0xCAC4B3, 0xB2B5B7, 0x000000, 0x000000,
		0xC0BCC1, 0xCCB9C2, 0xC2B4BD, 0xB3CBB4, 0xB7B8B6, 0xB9C9B3, 0xB4CABE, 0x000000, 0x000000, 0x000000, 0x000000, 0xC0BBBC, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0xC2B8C3, 0xB3C6B4, 0xC4BBB4, 0xB5BDB8, 0xB8B5C9, 0xC9BEB5, 0xCBCBC0, 0xBDC9BB, 0xB6C1C0, 0xB2BAC6, 0xB3BCBE, 0xCCBDC7, 0xBFC9C9, 0xCABBC0, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCAC6BE, 0xB6BFB8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xB5B8BA,
		0xC6B8B4, 0xC9B6B3, 0xCAB8B4, 0xBAC1B3, 0xBDC5CC, 0xB6C2C4, 0xB9B2C1, 0x000000, 0x000000, 0x000000, 0xC6BEC6, 0xC4B8BF, 0xC4BDBD, 0x000000, 0x000000, 0x000000,
		0x000000, 0xC4B6C0, 0xC2BBB7, 0xCCB7B5, 0xC9BABB, 0xC0C8C0, 0xC7C0C2, 0xBCBDB5, 0xBCB6B5, 0xBFC0BB, 0xC8B5B9, 0xB8B7C6, 0xB4B9C8, 0xBDC1B3, 0xCBC9CC, 0xB4C5C7,
		0xB8C5B4, 0xB3B9CB, 0xB6C3C9, 0xC4BFBB, 0xBBBFBC, 0xC9CAB4, 0xB4BCC2, 0xC2C9CC, 0xBDB4BA, 0xC7CCC7, 0xBFC9BE, 0xC4B4BA, 0xB9B7C4, 0xBABEB4, 0xB3BFB8, 0xB4CBBD,
		0xB7BAB9, 0xB6B8BF, 0xC5B8BA, 0xBFC1B5, 0xBDBACC, 0xBDBDBF, 0xC0C1B8, 0x000000, 0x000000, 0xB7C9C1, 0xB6B8CA, 0xB3C6B4, 0xC3C7B3, 0xBEC0B5, 0x000000, 0x000000,
		0x000000, 0xB6C1BB, 0xBFC0B3, 0xB5C4C6, 0xBFC0C5, 0xB7B7CC, 0xC8BEC6, 0xC0CAC5, 0xC0C6BC, 0xC0C6B8, 0xB2C0C1, 0xC2C8C1, 0xCBBBB5, 0xC0C2BA, 0xB6C8C2, 0xC1C9C7,
		0xBBC2B6, 0xB7BBC6, 0xBBBEC5, 0xC8C2BF, 0xC0C5BB, 0xC6B4C5, 0xC3CAB9, 0xBEB6CC, 0xB8C3C6, 0xB5BBB6, 0xB2BAB3, 0xBEB3B8, 0xCBBFBF, 0xC3C9BD, 0xCACBC0, 0xC1B4C4,
		0xBEB4B5, 0xB5B3C0, 0xC2C6C3, 0xC6BFC2, 0xBBC4CA, 0xC8C5C4, 0x000000, 0x000000, 0xBDC3B8, 0xB3B9B9, 0xB5B4C6, 0xB5BDCA, 0xBFBDBB, 0xBABEC3, 0xB2BECB, 0x000000,
		0x000000, 0xB8C4BC, 0xC0CABD, 0xC9CAB3, 0xC3B2B7, 0xCCC8B6, 0xBEC8BD, 0xC9BCC8, 0xBCB8BA, 0xB8CCB4, 0xBBB4B3, 0xC2B5B4, 0xBBC1B3, 0xBFBECC, 0xBAC1C4, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xB7BEC7, 0xB2B5B5, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCBB4CA,
		0xCACCBB, 0xBFC8B8, 0xB2C0C6, 0xB4C3CA, 0xC9C6BC, 0x000000, 0x000000, 0x000000, 0xC8B4B9, 0xC9B9C2, 0xC8C9BB, 0xC2C2B9, 0xC0BBC7, 0xB8B4B9, 0xC3C2BC, 0x000000,
		0x000000, 0xC2B3CA, 0xC5B3C8, 0xB4CAC5, 0xCAC7BD, 0xB6C2C6, 0xC3C6BB, 0xBBBEC9, 0xBABFC8, 0xB3B9B7, 0xBFCAB7, 0xC9C4BB, 0xCBC7C2, 0xB4BBBF, 0xB4B8BA, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC9BFB6, 0xC3B8CC, 0xB9B9B9, 0xB4C1C1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC3CAC1,
		0xB9C1BD, 0xB8B4B4, 0xBBCCBB, 0xB4B6BC, 0x000000, 0x000000, 0x000000, 0x000000, 0xB9BAC6, 0xB3C5BB, 0xC6B5B9, 0xBFB8C2, 0xBBCCB6, 0xC3B5BD, 0xCBCABE, 0x000000,
		0x000000, 0xC6B2B9, 0xBFBDB6, 0xC3BFC3, 0xBDB7B8, 0xCCB7B5, 0xBCC9B6, 0xC8C2C1, 0xBEC5B9, 0xC6BAB5, 0xC8BBB6, 0xB5BEC6, 0xB7BBBE, 0xC1CACC, 0xB6B4BF, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0xBDB5C6, 0xB4C8BB, 0xB2C3CA, 0xBCC1C7, 0xC0B3BA, 0xBBC1B4, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC5B8B6,
		0xB6B5B7, 0xC9B6BA, 0xB4C1B9, 0xBDB9BD, 0xC3B5B4, 0x000000, 0x000000, 0x000000, 0xB4CCB5, 0xB8BFC7, 0xCCB3BD, 0xC7C3C9, 0xB9B7BA, 0xC0CAB5, 0xC6C8C4, 0x000000,
		0x000000, 0xB8BAC4, 0xC4B8B7, 0xC6B4BD, 0xBFB6B7, 0xCCCACA, 0xC3B3B7, 0xB9B2BC, 0xB4BAC2, 0xCCB4C1, 0xC6BCBB, 0xBEC6BC, 0xB5C5C4, 0xB5BDBD, 0xCBB8C5, 0x000000,
		0x000000, 0x000000, 0x000000, 0xC9CCBC, 0xC2C3B8, 0xB6C5BD, 0xC7C8C4, 0xB8C3BF, 0xBBB4CA, 0xC0B3B9, 0xB6C5C7, 0x000000, 0x000000, 0x000000, 0x000000, 0xC8C1CB,
		0xC0B6CA, 0xC0BEC6, 0xC0C6C4, 0xB2C5C7, 0xC2BBC6, 0xCBCBBB, 0x000000, 0x000000, 0xC1C8BC, 0xBBC6B5, 0xB7BBC4, 0xBBC9C4, 0xC8B8BF, 0xC0B9BD, 0xC6C6BC, 0x000000,
		0x000000, 0xB9B8C5, 0xC7C4B6, 0xB4BCC2, 0xB9C4C3, 0xC6C7C8, 0xBAB8C0, 0xB6B9C1, 0xB6BEBB, 0xCACCCB, 0xB6B8CA, 0xC9B3BC, 0xCBB4C5, 0xC1B3CA, 0xCAB7B7, 0x000000,
		0x000000, 0x000000, 0xC8C2BA, 0xB9BDC5, 0xCCB4B4, 0xBBB6B2, 0xBDB3B9, 0xBDBEC4, 0xBDBDCC, 0xC6CBC5, 0xC8BAC5, 0xBFBCBE, 0x000000, 0x000000, 0x000000, 0xB6CAC3,
		0xCABAB9, 0xB3CCC3, 0xB2CABF, 0xBAB6B3, 0xB4CCB9, 0xBCC6BF, 0xC6B5C7, 0xC5CCB9, 0xBDBBB8, 0xB8B7BC, 0xBFB4B2, 0xB8B7C3, 0xBFC1CB, 0xCBB4BD, 0xCCBDB9, 0x000000,
		0x000000, 0xC6C2C7, 0xC6B6B5, 0xC0BBC8, 0xBDB5CB, 0xC1BCC7, 0xBAC3C4, 0xBBB7BA, 0xB7B8B6, 0xCAB2BD, 0xC6C6B8, 0xBBB9B4, 0xCCC2B7, 0xBFC2C5, 0xBCC4BF, 0x000000,
		0x000000, 0xC9C5B5, 0xBFC3CC, 0xB5CCB6, 0xC6CABD, 0xBBC0BB, 0xB6B5C1, 0xCABBC4, 0xC4C8CC, 0xB8B9BE, 0xBFCCB6, 0xBEB6BD, 0xC4B9C7, 0x000000, 0x000000, 0x000000,
		0xCAC2C8, 0xCBB3BB, 0xC8C1C3, 0xCBBDC6, 0xCCBDC9, 0xB5C0C5, 0xCAC9C4, 0xC4C8C9, 0xC1BEC4, 0xB4C4CB, 0xC1B5C0, 0xC6C9B3, 0xBFC1B8, 0xC3C8C6, 0xBDB7CA, 0x000000,
		0x000000, 0xC7CABD, 0xB9CAC9, 0xC8C5BA, 0xC9C9B5, 0xBDBFC4, 0xBFB7C3, 0xC3BCC4, 0xBCC4B5, 0xC8CAB6, 0xBBB6C3, 0xC2BCC0, 0xB3B7C6, 0xC4C0C3, 0xB5B4BC, 0x000000,
		0x000000, 0x000000, 0xBDB5CA, 0xB6C6B7, 0xB2C9CA, 0xB3CAB8, 0xCCBAC4, 0xBFBDBC, 0xCAB6C4, 0xCAB9C7, 0xC5C1B8, 0xC9C8B9, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0xB6C3B3, 0xBCCAB7, 0xB7BAB3, 0xC0C1CB, 0xB4B2C1, 0xC6BDC2, 0xC4BFBD, 0xC1B7B4, 0xB5B7B6, 0xC6C9B3, 0xC9C2BE, 0xCAC5BD, 0xBABACB, 0xBDBBBA, 0x000000,
		0x000000, 0xC4BFC8, 0xC6C7B8, 0xB7C2CB, 0xB2BECA, 0xBEC6BF, 0xBDB3BA, 0xC9BDC7, 0xC4CBC5, 0xC2BDB8, 0xB2C0C5, 0xC2BDC3, 0xB4C7BA, 0xCBCCC1, 0xB3C4BC, 0x000000,
		0x000000, 0x000000, 0x000000, 0xC3BFC0, 0xB7C8BC, 0xC7BCC6, 0xCACBB6, 0xCBBDC7, 0xB8BEBE, 0xB8C9BE, 0xB4BACA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0xB5C7C5, 0xBCB4CB, 0xBABABA, 0xC4CAB8, 0xBBB6C3, 0xBDC6C3, 0xBBC0B3, 0xC2C4B5, 0xC9B5BA, 0xC8B5BE, 0xB8CAC2, 0xCBCCB9, 0xCAB9B4, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
		0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
	]
};

// Walk map

G.walkmap = {
	width : 48, height : 48, pixelSize : 1,
	data : [
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	]
};
